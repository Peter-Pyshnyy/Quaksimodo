~ tutorial_start
Euler: Was soll ich heute erklären?

- Lineare Funktionen =>< tutorial_lineareFunktionen
- Quadratische Funktionen => tutorial_quadratischeFunktionen
- Nichts => END
=> END


~ tutorial_level_1
Euler: Hallo Quaksimodo. Ich sehe, du hast dich wieder auf den Weg über den Teich gemacht!
Euler: Pass bitte auf dich auf. Da draußen gibt es viele Tiere, die dich als Futter sehen.
Euler: Ich möchte dir dabei helfen, dich durchzuschlagen. 
=>< fragen_level_1
Euler: Viel Glück!
=> END

~ tutorial_level_2
Euler: Guten Abend Quaksimodo. Du bist ja immernoch unterwegs!
Euler: So spät am Abend sind nurnoch die hungrigsten Tiere hier draußen.
Euler: Desto später es wird, desto schwerer wird es auch sein, bei Konflikten mit deinen Froschschenkeln intakt davon zu kommen.
Euler: Sag Bescheid, wenn ich dir irgendwas erklären soll!
=> fragen_level_2

~ tutorial_level_3
Euler: Was machst du denn jetzt noch hier??
Euler: Es ist mitten in der Nacht. Du bist doch verrückt!
Euler: Es wäre ein Wunder, wenn du die Nacht so spät noch überstehst.
Euler: Ich werde dir natürlich weiter helfen, aber so langsam muss ich mich auch auf die Jagd begeben.
=> fragen_level_3


~ fragen_level_1
Euler: Bitte sag mir, was ich dir erklären soll!
- Wie gebe ich meine Antworten ein? =>< tutorial_input
- Ableitungen =>< tutorial_ableitungen
- Lineare Funktionen =>< tutorial_lineareFunktionen
- Quadratische Funktionen =>< tutorial_quadratischeFunktionen
- Ich weiß, was ich zu tun habe! => END
=> fragen_level_1

~ fragen_level_2
Euler: Kann ich dir irgendwie weiterhelfen?
- (Wiederholung) Wie gebe ich meine Antworten ein? =>< tutorial_input
- (Wiederholung) Ableitungen =>< tutorial_ableitungen
- (Wiederholung) Lineare Funktionen =>< tutorial_lineareFunktionen
- (Wiederholung) Quadratische Funktionen =>< tutorial_quadratischeFunktionen
- Kubische Funktionen =>< tutorial_kubischeFunktionen
- Änderungsrate =>< tutorial_aenderungsrate
- Ich weiß, was ich zu tun habe! => END
=> fragen_level_2

~ fragen_level_3
Euler: Was kann ich für dich tun?
- (Wiederholung) Wie gebe ich meine Antworten ein? =>< tutorial_input
- (Wiederholung) Ableitungen =>< tutorial_ableitungen
- (Wiederholung) Lineare Funktionen =>< tutorial_lineareFunktionen
- (Wiederholung) Quadratische Funktionen =>< tutorial_quadratischeFunktionen
- (Wiederholung) Kubische Funktionen =>< tutorial_kubischeFunktionen
- Erweiterte Ableitungsregeln =>< tutorial_ableitungen2
- Änderungsrate =>< tutorial_aenderungsrate
- Ich weiß, was ich zu tun habe! => END
=> fragen_level_3

~ tutorial_input
Euler: Pass auf, dass du deine Antworten immer korrekt einträgst!
Euler: Die anderen Tiere sind schlau, aber wenn du nicht genau das schreibst, was sie erwarten, können sie schnell ungeduldig werden
Euler: Also pass jetzt genau auf!
Euler: Grundlegend musst du naürlich auf die klassischen Reihenfolgengesetzt achten, wenn du Klammern setzt.
Euler: Punkt vor Strich und der ganze Rest.
Euler: Wenn du multiplizierst musst du [b]immer[/b] ein * setzen!
Euler: Selbst wenn du eine Funktionen ansonsten wie "12x" schreiben würdest, hier heißt es immer "12 * x"
Euler: Potenzen werden immer durch ein "^" ausgedrückt.
Euler: "x²" musst du also als "x^2" und "x³" als "x^3" schreiben.
Euler: Brüche werden als "a/b" geschrieben. "0.5" kannst du dadurch auch als "1/2" darstellen.
Euler: Um den Bruch selbst musst du keine Klammer setzen. Sollte jedoch eine kompliziertere Funktion unter dem Bruchstrich stehen, musst du diese in eine Klammer fassen.
Euler: Alles bedacht musst du "(x³ - 4) / (x⁵ - 1)" also als "(x^3 - 4)/(x^5 - 1)" darstellen.
Euler: Sollte es mehrere Antworten geben, wie bei Nullstellen, so musst du sie mit einem Komma trennen.
Euler: Zwei Nullstellen, bei -1 und 1 zum Beispiel, gibst du als "-1, 1" an.
=> END

~ tutorial_ableitungen
Euler: Ableitungen sind eigentlich recht simpel. Du musst nur wissen, wie du ihre Regeln anwendest.
Euler: Wenn du eine Funktion ableitest erhältst du dessen Anstieg.
Euler: Der Anstieg der Funktion 12x ist 12. Daher ist dies die Ableitung.
Euler: Für alle nicht-linearen Funktionen ist der Anstieg aber natürlich an den verschiedenen Werten unterschiedlich.
Euler: Daher ist die Ableitung selbst auch eine Funktion. Sie wird als f'(x) geschrieben.
Euler: Dabei bestimmt die Anzahl der Striche, um die wievielte Ableitung es sich handelt.
Euler: f"(x) ist einfach die Ableitung von f'(x).
Euler: Aber wie leitet man denn jetzt überhaupt ab?
Euler: Wie du an der linearen Ableitung gesehen hast nimmst du einfach ein x weg. Einzelne Summanden ohne x verschwinden komplett.
Euler: Schließlich hat die Verschiebung entlang der y-Achse keinen Einfluss auf den Anstieg.
Euler: Hat das x jedoch einen Exponenten musst du etwas mehr tun.
Euler: Erst multiplizierst du den Summanden mit dem Exponenten in der Ausgangsfunktion. Dann subtrahierst du 1 von dem Exponenten.
Euler: Das klingt vielleicht etwas kompliziert. Daher hier ein Beispiel:
Euler: f(x) = 2x³ + 5x² + x + 15\nf'(x) = 6x² + 10x + 1\nf"(x) = 6x + 10
=> END

~ tutorial_ableitungen2
=>< tutorial_produktregel
=>< tutorial_quotientenregel
=>< tutorial_trigonometrische
=>< tutorial_kettenregel
=> abl_wiederholung


~ tutorial_produktregel
Euler: Sollten zwei verschiedene x miteinander multipliziert werden, kannst du sie nicht einfach wie gehabt Ableiten.
Euler: 3x³ * 5x² sind abgeleitet nicht einfach 9x² * 10x.
Euler: Die Formel, die du dir merken musst ist "g(x)*h(x) wird g'(x)*h(x) + g(x)*h'(x)".
Euler: g(x)*h(x) wird g'(x)*h(x) + g(x)*h'(x)\nDu musst also beide einzeln ableiten, mit dem ursprünglichen Faktor multiplizieren und dann beide addieren.
Euler: g(x)*h(x) wird g'(x)*h(x) + g(x)*h'(x)\nNehmen wir wieder unsere 3x³ * 5x².
Euler: g(x)*h(x) wird g'(x)*h(x) + g(x)*h'(x)\n3x³' = 6x² und 5x²' = 10x
Euler: g(x)*h(x) wird g'(x)*h(x) + g(x)*h'(x)\nAlso ist unsere Ableitung 3x³ * 10x + 6x² * 5x²
Euler: g(x)*h(x) wird g'(x)*h(x) + g(x)*h'(x)\nDas ganze können wir jetzt noch zusammenfassen und bekommen 30x⁴ + 30x⁴ = 60x⁴
=> END

~ tutorial_quotientenregel
Euler: Die Quotientenregel ist noch komplizierter als die Produktregel.
Euler: Die Formel lautet g(x)/h(x) -> (h(x)*g'(x)-g(x)*h(x))/(h(x))²
Euler: g(x)/h(x) -> (h(x)*g'(x)-g(x)*h(x))/(h(x))²\nGehen wir das in Ruhe ab.
Euler: g(x)/h(x) -> (h(x)*g'(x)-g(x)*h(x))/(h(x))²\nNehmen wir (2x³)/(5x)
Euler: g(x)/h(x) -> (h(x)*g'(x)-g(x)*h(x))/(h(x))²\nh(x)*g'(x) ist 5x * 6x²
Euler: g(x)/h(x) -> (h(x)*g'(x)-g(x)*h(x))/(h(x))²\nh'(x)*g(x) ist 5 * 2x³
Euler: g(x)/h(x) -> (h(x)*g'(x)-g(x)*h(x))/(h(x))²\nUnd zuletzt (h(x))² ist 25x²
Euler: g(x)/h(x) -> (h(x)*g'(x)-g(x)*h(x))/(h(x))²\nAlso lautet unsere Formel (5x * 6x² - 5 * 2x³) / 25x²
Euler: Und das macht 30x³-10x³/25x², also lautet die Ableitung 20x³/25x²
=> END

~ tutorial_trigonometrische
Euler: Trigonometrische Ableitungen sind eigentlich ganz simpel.
Euler: sin(x) -> cos(x) -> -sin(x) -> -cos(x) -> sin(x)
Euler: Wenn du dir diesen Kreislauf merken kannst, sollten trigonometrische Ableitungen nie ein Problem sein.
Euler: Du musst nur wissen, was du mit machst, wenn da mehr als x in der Klammer steht.
=> END

~ tutorial_kettenregel
Euler: Sollte innerhalb einer Funktion eine andere Funktion vorkommen musst du die Kettenregel anwenden.
Euler: So kannst du zum Beispiel sin(2x) ableiten.
Euler: Im Grunde ist sie auch ganz einfach: g(h(x)) -> g'(h(x)) * h'(x)
Euler: g(h(x)) -> g'(h(x)) * h'(x)\nNehmen wir unser Sinusbeispiel: sin(2x)
Euler: g(h(x)) -> g'(h(x)) * h'(x)\nDie Ableitung vom Sinus ist der Cosinus, also ist g'(h(x)) = cos(2x)
Euler: g(h(x)) -> g'(h(x)) * h'(x)\nUnd die Ableitung von 2x ist 2.
Euler: g(h(x)) -> g'(h(x)) * h'(x)\nAlso ist sin(2x)' = 2cos(2x)
Euler: Dieses Prinzip kann auf klassiche Klammern wie 2x(x² + 3x³) angewendet werden, aber auch zum Beispiel auf Exponentialfunktionen wie 2x^x
=> END

~ abl_wiederholung
Euler: Soll ich die neuen Regeln nochmal wiederholen?
- Nur die Produktregel =>< tutorial_produktregel
- Nur die Quotientenregel =>< tutorial_quotientenregel
- Nur die Trigonometrieregeln =>< tutorial_trigonometrische
- Ja, alle bitte => tutorial_ableitungen2
- Nein => END
=> abl_wiederholung

~ tutorial_lineareFunktionen

Euler: Lineare Funktionen sind wohl die einfachsten der Funktionen
do show_graphic("linear")
Euler: Eine lineare Funktion sieht in der Regel so aus:\na * x + b
Euler: ax + b\nDie Funktion, die du hier sehen kannst ist f(x) = x
Euler: ax + b\nDas b in der Funktion bestimmt die [b]Verschiebung entlang der y-Achse[/b]
do show_graphic("linear1")
Euler: ax + b\nHier ist die Funktion f(x) = x + 1. Die Funktion wird um 1 nach oben verschoben.
Euler: ax + b\nDas b in der Funktion bestimmt die [b]Steigung[/b] der Funktion
do show_graphic("linear2")
Euler: ax + b\nHier siehst du die Funktion f(x) = 2x
do show_graphic("linear3")
Euler: ax + b\nUnd hier ist die Funktion f(x) = (1/2)x
do hide_graphic()
Euler: Soll ich lineare Funktionen noch einmal erklären?
- Ja => tutorial_lineareFunktionen
- Nein => END

~ tutorial_quadratischeFunktionen

Euler: Es gibt verschiedene Arten von quadratischen Funktionen, die nach der Form a*x²+b*x+c verlaufen!
do show_graphic("quadratisch")
Euler: ax²+bx+c\nWenn a größer 0 ist, dann ist die Parabel nach oben geöffnet.
Euler: ax²+bx+c\nDies hier ist f(x) = x²
do show_graphic("quadratisch1")
Euler: ax²+bx+c\nSollte a kleiner als 0 sein, dann ist die Parabel nach unten geöffnet.
Euler: ax²+bx+c\nHier siehst du die Funktion f(x) = -x²
do show_graphic("quadratisch2")
Euler: ax²+bx+c\nDesto größer a ist, desto näher wird die Parabel an die x-Achse [b]gestaucht[/b].[wait = 0.5] Hier ist f(x) = 2 * x^2
do show_graphic("quadratisch3")
Euler: ax²+bx+c\nDesto kleiner a ist, desto näher wird die Parabel an die y-Achse [b]gestreckt[/b].[wait = 0.5] Hier ist f(x) = (1/2) * x^2
do show_graphic("quadratisch")
Euler: ax²+bx+c\nc verschiebt den Graphen entlang der y-Achse, genau wie bei linearen Funktionen.
do show_graphic("quadratisch4")
Euler: ax²+bx+c\nHier ist f(x) = x² + 1 zum Beispiel.
Euler: ax²+bx+c\nDen Graphen entlang der x-Achse zu verschieben geht auch, ist aber ein wenig komplizierter
Euler: ax²+bx+c\nInnerhalb einer Klammer muss zu x hinzuaddiert werden, um diesen Effekt zu erreichen.
do show_graphic("quadratisch5")
Euler: (x+d)²+bx+c\nd verschiebt den Graphen entlang der x-Achse, jedoch in entgegengesetzter Richtung.
Euler: (x+d)²+bx+c\n Die Funktion vor dir ist f(x) = (x+1)²
do hide_graphic()
=> quadratisch_weiter

~ tutorial_kubischeFunktionen
Euler: Eine kubische Funktion ist eine Funktion, dessen größter Exponent 3 ist.
Euler: Also besteht eine Kubische Funktion aus der Form a * x³ + b * x² + c * x + d.
do show_graphic("kubisch")
Euler: ax³+bx²+cx+d\nier siehst du die kubische Funktion x³.
Euler: ax³+bx²+cx+d\nSie wird nicht verschoben und hat daher eine Plateaustelle an x=0.
do show_graphic("kubisch1")
Euler: ax³+bx²+cx+d\nUnd hier ist die Funktion x³+x².
Euler: ax³+bx²+cx+d\nSie hat zwei Extremstellen, einen [b]lokales Maximum[/b], gefolgt von einem [b]lokalen Minimum[/b].
Euler: ax³+bx²+cx+d\nZwischen ihnen befindet sich ein [b]Wendepunkt[/b] an welchem der Anstieg aus vom Wachsen ins Fallen wechselt.
Euler: Um beide zu errechnen musst du natürlich Ableitungen verwenden.
do hide_graphic()
=> kubisch_weiter


~ quadratisch_weiter
Euler: Soll ich dir noch etwas zu quadratischen Funktionen erklären?
- Wie berechne ich die Nullstellen? 
	=>< tutorial_nullstellen
- Wie finde ich Scheitelpunkte? 
	=>< tutorial_scheitelpunkte
- Kannst du das alles nochmal wiederholen? => tutorial_quadratischeFunktionen
- Nein => END
=> quadratisch_weiter

~ kubisch_weiter
Euler: Soll ich dir noch etwas zu kubischen Funktionen erklären?
- Wie berechne ich Nullstellen?
	=>< tutorial_nullstellen
	=>< tutorial_nullstellen_kubisch
- Wie finde ich Wendepunkte?
	=>< tutorial_wendepunkte
- Nein => END
=> kubisch_weiter

~ tutorial_nullstellen
Euler: Nullstellen errechnen ist ganz einfach!
Euler: Du musst nur die Funktion gegen 0 setzen und gegen x rechnen.
Euler: Bei linearen funktionen ist das sehr leicht.
Euler: f(x)= 2x+4\n0 = 2x+4 |-4\n-4 = 2x |:2\n-2 = x
Euler: Bei quadratischen Funktionen musst du einfach in die pq-Formel umstellen.
Euler: Was ist die pq-Formel? Ganz einfach!
Euler: x = -p/2 +/- √((p/2)²-q)
Euler: Sagen wir, deine Funktion ist x²-6x+5. Dann wäre -6 dein p und 5 dein q
Euler: Also wäre dein x = 6/2 +/- √((-6/2)²-5), oder vereinfacht: 3 +/- √4
Euler: Du siehst, dass zwei Lösungen herauskommen: 3+2 und 3-2
Euler: Die Funktion schneidet die x-Achse also an x=1 und x=5
Euler: Sollte unter der Wurzel 0 herauskommen gäbe es nur eine Nullstelle. 
Euler: Pass auf, dass du immer alle Nullstellen angibst!
=> END

~ tutorial_nullstellen_kubisch
Euler: Es ist möglich, dass es mehr als zwei Nullstellen geben kann.
Euler: In dem Fall musst du versuchen, die Funktion in eine Quadratische umzustellen, damit du die pq-Formel anwenden kannst.
Euler: Ein einfaches Beispiel wäre "x³+5x²+x".
Euler: Wir können x aus der Funktion heraus ziehen.\nAus x³+5x²+x wird x(x²+5x+1).
Euler: x(x²+5x+1)\nJetzt wissen wir, dass 0 eine Nullstelle sein muss, denn dann wird das x vor der Klammer 0 und damit der Rest auch.
Euler: x(x²+5x+1)\nIn der Klammer können wir dann einfach die pq-Formel anwenden: x = -p/2 +/- √((p/2)²-q)
=> END

~ tutorial_scheitelpunkte
Euler: Scheitelpunkte werden unterschieden in [b]Maxima[/b] und [b]Minima[/b]
Euler: Ein Maximum ist die Stelle, an der der Anstieg vom Positiven in das Negative geht.
Euler: Ein Minimum ist das genaue Gegenteil.
Euler: Um einen Scheitelpunkt zu finden, musst du zuerst die Ableitung der Funktion bestimmen.
Euler: Das tust du indem du ausschließlich jedes x in der Funktion nimmst und durch deren Faktoren ersetzt.
Euler: Aus 5x, zum Beispiel, wird 5. Aus 5x + 3 wird ebenfalls 5.
Euler: Das liegt daran, dass die Ableitung den Anstieg der Funktion an jeder Stelle angibt.
Euler: Sollte x einen Faktor haben, so wird von diesem 1 subtrahiert und der ursprüngliche Faktor mit dem x multipliziert.
Euler: 5x³, zum Beispiel, wird zu 15x²
Euler: An einem Scheitelpunkt ist der Anstieg der Funktion 0, also suchen wir nach den Nullstellen der Ableitung.
Euler: Die Ableitung der quadratischen Funktion f(x) = 3x² + 5x - 6 ist f'(x) = 6x + 5
Euler: Die Nullstelle von f'(x) = 6x + 5 liegt bei -(5/6)
Euler: Also ist der Scheitelpunkt von f(x) 3x² + 5x - 6 an der Stelle -(5/6)
=> END

~ tutorial_wendepunkte
Euler: Wendepunkte sind eigentlich ganz leicht.
Euler: Sie sind eigentlich nur Extreme, aber eine Ableitung tiefer.
Euler: Extremstellen sind die Stellen, an denen die 1. Ableitung = 0 ist.
Euler: Wendepunkte erhältst du, wenn du die Nullstellen der 2. Ableitung findest.
=> END

~ tutorial_aenderungsrate
Euler: Die Änderungsrate gibt an, wie schnell die Beschleunigung beschleunigt.
Euler: Sie ist einfach der Wert der 2. Ableitung an der Stelle x
=> END


~ storch_battle_start

% Storch: Endlich was zu essen!
% Storch: Bringen wir's hinter uns. Ich hab dann noch ein Baby zu liefern.
% Storch: Froschschenkel! Die mag ich am Liebsten!
% Storch: Ab in den Horst mit dir!
% Storch: Wenn ich mit dir fertig bin, wirst DU die Nullstelle sein.
% Storch: Ich zieh gleich deine Wurzeln!

=> END

~ storch_battle_victory

% Storch: Nächstes mal krieg ich dich!
% Storch: Ughh, ich glaube ich hab noch einen anderen Frosch im Hals.
% Storch: Ach halt doch den Schnabel!
% Storch: So lecker siehst du eh nicht aus!
% Storch: Jetzt hab ich keinen Appetit mehr...
% Storch: Taschenrechner ist Schummeln!

=> victory_transition

~ storch_battle_failure

% Storch: Das wird lecker.
% Storch: Ich bereite schonmal den Herd vor...
% Storch: Damit wäre das Abendessen schonmal gesichert.
% Storch: Ich hoffe ich kann das Baby noch rechtzeitig abliefern.
% Storch: So viel kann ich garnicht essen.

=> failure_transition

~ igel_battle_start

% Igel: Komm her, ich pieks dich!!!
% Igel: Ich zerhack dich!!!
% Igel: Ich hoffe, du magst Nadeln!
% Igel: Hau lieber ab! Ich hab eine Axt gefunden und will sie ausprobieren!
% Igel: Das wird dir mehr weh tun als mir!

=> END

~ igel_battle_victory

% Igel: Autsch...
% Igel: Hast du dich wenigstens gestochen?
% Igel: Uiuiuiui, das wars...
% Igel: Hey warte, du sollst verlieren!
% Igel: Das war unfair!

=> victory_transition

~ igel_battle_failure

% Igel: Hack hack hack hahahaha
% Igel: Ich weiß genau, welche Soße ich nehmen werde!
% Igel: Wie genau bereitet man Frosch überhaupt zu...?
% Igel: Hat sich jemand gestochen?
% Igel: Das passiert, wenn man einen Igel anstachelt.

=> failure_transition

~ bieber_battle_start

% Bieber: Holz... Holz... Holz... Frosch... Frosch!?
% Bieber: Ach verdammt, ich hatte eigentlich schon was vor. Aber für dich wird die Zeit noch reichen
% Bieber: AH! EIN FROSCH! Ich mag Frösche nicht!
% Bieber: AH! EIN FROSCH! Ich liebe Frösche!
% Bieber: Ah, ein Frosch. Ich habe keine starken Gefühle gegenüber Fröschen.
% Bieber: Bleib ja weg von meinem Damm!

=> END

~ bieber_battle_victory

% Bieber: Ach verdammt...
% Bieber: Du blöde Nervennage!
% Bieber: AH! Mein ganzer Damm fällt auseinander!
% Bieber: Ich glaube, das reicht erstmal für mich.
% Bieber: Eh, egal. Ich geh weiter Stöcke sammeln.
% Bieber: Ich mag dich nicht.

=> victory_transition

~ bieber_battle_failure

% Bieber: Bleh!
% Bieber: Plitsch platsch und du bist Matsch!
% Bieber: Oh warte, alles okay? Du siehst garnicht gut aus.
% Bieber: Endlich! Ich dachte schon, wir werden hier garnicht fertig.
% Bieber: Nein nein, so rechnet man das nicht.

=> failure_transition

~ storchimedes_battle_start
Storchimedes: Du begehst einen schweren Fehler, kleiner Frosch!
Storchimedes: Ich brutzel dich mit meinem Storchimedes Hitzestrahl!
=> END

~ storchimedes_battle_victory
Storchimedes: Oh nein. Ich glaube, ich wurde gebrutzelt...
=> victory_transition

~ storchimedes_battle_failure
Storchimedes: Immernoch unbesiegt!
=> failure_transition

~ pythaguhus_battle_start
Pythaguhus: Katheten bei Seite, ich schnapp mir 'nen Frosch!
=> END

~ pythaguhus_battle_victory
Pythaguhus: Hurrah! Ich... [wait=1] warte was? Ich habe verloren???
=> victory_transition

~ pythaguhus_battle_failure
Pythaguhus: Hypotenuse? Wohl eher Hypothe-[wait=0.5].[wait=0.5].[wait=0.5].[wait=0.5]Loser
Pythaguhus: ...
Pythaguhus: Argh, was auch immer. Ich fress dich!
=> failure_transition

~ fuchlid_battle_start
Fuchlid: Was als nächstes passiert wird dir unproportional heftig weh tun.
=> END

~ fuchlid_battle_victory
Fuchlid: ... >:(
=> victory_transition

~ fuchlid_battle_failure
Fuchlid: Wenn ich mit dir fertig bin wirst du nicht mehr euklidisch aussehen, das verspreche ich dir.
=> failure_transition

~ euler_battle_start
Euler: Wenn du dies liest, hast du bereits verloren.
=> END

~ euler_battle_victory
Euler: Mach dir weniger Gedanken übers Gewinnen und mehr Gedanken darüber, das hier zu patchen.
=> victory_transition

~ euler_battle_failure
Euler: Eh, was auch immer. Ich bin eh nur hier, um Errors abzufangen.
=> END

~ victory_transition
do Transition.transition_scene("res://scenes/Map/Map.tscn")
=> END

~ failure_transition
do Transition.transition_scene("res://scenes/menu/main_menu.tscn")
=> END