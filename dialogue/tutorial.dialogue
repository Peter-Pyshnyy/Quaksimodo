~ tutorial_start
Euler: Was soll ich heute erklären?

- Lineare Funktionen => tutorial_lineareFunktionen
- Nullstellen => tutorial_nullstellen
- Ableitungen (wahrscheinlich nicht implementiert) => tutorial_ableitung
- Quadratische Funktionen => tutorial_quadratischeFunktionen
- Nichts => END
=> END


~ tutorial_lineareFunktionen

Euler: Lineare Funktionen sind wohl die einfachsten der Funktionen
do show_graphic("linear")
Euler: Eine lineare Funktion sieht in der Regel so aus:\na * x + b
Euler: a * x + b\nDie Funktion, die du hier sehen kannst ist f(x) = x
Euler: a * x + b\nDas b in der Funktion bestimmt die [b]Verschiebung entlang der y-Achse[/b]
do show_graphic("linear1")
Euler: a * x + b\nHier ist die Funktion f(x) = x + 1. Die Funktion wird um 1 nach oben verschoben.
Euler: a * x + b\nDas b in der Funktion bestimmt die [b]Steigung[/b] der Funktion
do show_graphic("linear2")
Euler: a * x + b\nHier siehst du die Funktion f(x) = 2x
do show_graphic("linear3")
Euler: a * x + b\nUnd hier ist die Funktion f(x) = (1/2)x
do hide_graphic()
Euler: Soll ich lineare Funktionen noch einmal erklären?
- Ja => tutorial_lineareFunktionen
- Nein => END

~ tutorial_quadratischeFunktionen

Euler: Es gibt verschiedene Arten von quadratischen Funktionen, die nach der Form a*x²+b*x+c verlaufen!
do show_graphic("quadratisch")
Euler: a*x²+b*x+c\nWenn a größer 0 ist, dann ist die Parabel nach oben geöffnet.
Euler: a*x²+b*x+c\nDies hier ist f(x) = x^2
do show_graphic("quadratisch1")
Euler: a*x²+b*x+c\nSollte a kleiner als 0 sein, dann ist die Parabel nach unten geöffnet.
Euler: a*x²+b*x+c\nHier siehst du die Funktion f(x) = -x^2
do show_graphic("quadratisch2")
Euler: a*x²+b*x+c\nDesto größer a ist, desto näher wird die Parabel an die x-Achse [b]gestaucht[/b].[wait = 0.5] Hier ist f(x) = 2 * x^2
do show_graphic("quadratisch3")
Euler: a*x²+b*x+c\nDesto kleiner a ist, desto näher wird die Parabel an die y-Achse [b]gestreckt[/b].[wait = 0.5] Hier ist f(x) = (1/2) * x^2
do show_graphic("quadratisch")
Euler: a*x²+b*x+c\nc verschiebt den Graphen entlang der y-Achse, genau wie bei linearen Funktionen.
do show_graphic("quadratisch4")
Euler: a*x²+b*x+c\nHier ist f(x) = x^2 + 1 zum Beispiel.
Euler: a*x²+b*x+c\nDen Graphen entlang der x-Achse zu verschieben geht auch, ist aber ein wenig komplizierter
Euler: a*x²+b*x+c\nInnerhalb einer Klammer muss zu x hinzuaddiert werden, um diesen Effekt zu erreichen.
do show_graphic("quadratisch5")
Euler: (x+d)²+b*x+c\nd verschiebt den Graphen entlang der x-Achse, jedoch in entgegengesetzter Richtung.
Euler: (x+d)²+b*x+c\n Die Funktion vor dir ist f(x) = (x+1)^2
do hide_graphic()
=> quadratisch_weiter


~ quadratisch_weiter
Euler: Soll ich dir noch etwas zu quadratischen Funktionen erklären?
- Wie berechne ich die Nullstellen? => tutorial_nullstellen
- Wie finde ich Scheitelpunkte?
- Kannst du das alles nochmal wiederholen? => tutorial_quadratischeFunktionen
- Nein => END

~ tutorial_nullstellen
Euler: Nullstellen errechnen ist ganz einfach!
Euler: Du musst nur die Funktion gegen 0 setzen und gegen x rechnen.
Euler: Bei linearen funktionen ist das sehr leicht.
Euler: f(x)= 2x+4 -> 0 = 2x+4 |-4 -> -4 = 2x |:2 -> -2 = x
Euler: Bei quadratischen Funktionen musst du einfach in die pq-Formel umstellen.
Euler: Was ist die pq-Formel? Ganz einfach!
Euler: x = -p/2 +/- √((p/2)²-q)
Euler: Sagen wir, deine Funktion ist x²-6x+5. Dann wäre -6 dein p und 5 dein q
Euler: Also wäre dein x = 6/2 +/- √((-6/2)²-5), oder vereinfacht: 3 +/- √4
Euler: Du siehst, dass zwei Lösungen herauskommen: 3+2 und 3-2
Euler: Die Funktion schneidet die x-Achse also an x=1 und x=5
Euler: Sollte unter der Wurzel 0 herauskommen gäbe es nur eine Nullstelle. 
Euler: Pass auf, dass du immer alle Nullstellen angibst!
=> quadratisch_weiter

~ tutorial_scheitelpunkte
Euler: Um einen Scheitelpunkt zu finden, musst du zuerst die Ableitung der Funktion bestimmen.
Euler: Das tust du indem du ausschließlich jedes x in der Funktion nimmst und durch deren Faktoren ersetzt.
Euler: Aus 5*x, zum Beispiel, wird 5. Aus 5*x + 3 wird ebenfalls 5.
Euler: Das liegt daran, dass die Ableitung den Anstieg der Funktion an jeder Stelle angibt.
Euler: Sollte x einen Faktor haben, so wird von diesem 1 subtrahiert und der ursprüngliche Faktor mit dem x multipliziert.
Euler: 5*x^3, zum Beispiel, wird zu 15*x^2
Euler: An einem Scheitelpunkt ist der Anstieg der Funktion 0, also suchen wir nach den Nullstellen der Ableitung.
Euler: Die Ableitung der quadratischen Funktion f(x) = 3x^2 + 5x - 6 ist f'(x) = 6x + 5
Euler: Die Nullstelle von f'(x) = 6x + 5 liegt bei -(5/6)
Euler: Also ist der Scheitelpunkt von f(x) 3x^2 + 5x - 6 an der Stelle -(5/6)
=> quadratisch_weiter


~ tutorial_ableitung

Euler: Eine Ableitung gibt die Steigung der Funktion an einer jeweiligen Stelle an.
Euler: Um eine Ableitung zu finden muss essenziell die Funktion auf das x reduziert werden.
Euler: Zum Beispiel: Die lineare Funktion f(x)= 5x+3 hat überall den Anstieg 5.
Euler: Alle Zahlen ohne x werden weggeschmissen und nur das die 5 bleibt übrig. Die Ableitung f'(x) ist 5.
Euler: Bei Potenzen ist es etwas anders. Die Potenz wird um 1 subtrahiert und die vorherige Potenz wird zum x multipliziert
Euler: x² wird zu 2x. x³ wird zu 3x². 3x² wird zu 6x.

=> END




~ storch_battle_start

% Storch: Endlich was zu essen!
% Storch: Bringen wir's hinter uns. Ich hab dann noch ein Baby zu liefern.
% Storch: Froschschenkel! Die mag ich am Liebsten!
% Storch: Ab in den Horst mit dir!
% Storch: Wenn ich mit dir fertig bin, wirst DU die Nullstelle sein.
% Storch: Ich zieh gleich deine Wurzeln!

=> END

~ storch_battle_victory

% Storch: Nächstes mal krieg ich dich!
% Storch: Ughh, ich glaube ich hab noch einen anderen Frosch im Hals.
% Storch: Ach halt doch den Schnabel!
% Storch: So lecker siehst du eh nicht aus!
% Storch: Jetzt hab ich keinen Appetit mehr...
% Storch: Taschenrechner ist Schummeln!

=> END

~ storch_battle_failure

% Storch: Das wird lecker.
% Storch: Ich bereite schonmal den Herd vor...
% Storch: Damit wäre das Abendessen schonmal gesichert.
% Storch: Ich hoffe ich kann das Baby noch rechtzeitig abliefern.
% Storch: So viel kann ich garnicht essen.

=> END

~ igel_battle_start

% Igel: Komm her, ich pieks dich!!!
% Igel: Ich zerhack dich!!!
% Igel: Ich hoffe, du magst Nadeln!
% Igel: Hau lieber ab! Ich hab eine Axt gefunden und will sie ausprobieren!
% Igel: Das wird dir mehr weh tun als mir!

=> END

~ igel_battle_victory

% Igel: Autsch...
% Igel: Hast du dich wenigstens gestochen?
% Igel: Uiuiuiui, das wars...
% Igel: Hey warte, du sollst verlieren!
% Igel: Das war unfair!

=> END

~ igel_battle_failure

% Igel: Hack hack hack hahahaha
% Igel: Ich weiß genau, welche Soße ich nehmen werde!
% Igel: Wie genau bereitet man Frosch überhaupt zu...?
% Igel: Hat sich jemand gestochen?
% Igel: Das passiert, wenn man einen Igel anstachelt.

=> END

~ bieber_battle_start

% Bieber: Holz... Holz... Holz... Frosch... Frosch!?
% Bieber: Ach verdammt, ich hatte eigentlich schon was vor. Aber für dich wird die Zeit noch reichen
% Bieber: AH! EIN FROSCH! Ich mag Frösche nicht!
% Bieber: AH! EIN FROSCH! Ich liebe Frösche!
% Bieber: Ah, ein Frosch. Ich habe keine starken Gefühle gegenüber Fröschen.
% Bieber: Bleib ja weg von meinem Damm!

=> END

~ bieber_battle_victory

% Bieber: Ach verdammt...
% Bieber: Du blöde Nervennage!
% Bieber: AH! Mein ganzer Damm fällt auseinander!
% Bieber: Ich glaube, das reicht erstmal für mich.
% Bieber: Eh, egal. Ich geh weiter Stöcke sammeln.
% Bieber: Ich mag dich nicht.

=> END

~ bieber_battle_failure

% Bieber: Bleh!
% Bieber: Plitsch platsch und du bist Matsch!
% Bieber: Oh warte, alles okay? Du siehst garnicht gut aus.
% Bieber: Endlich! Ich dachte schon, wir werden hier garnicht fertig.
% Bieber: Nein nein, so rechnet man das nicht.

=> END